Server

import java.io.*; // I/O libraries
import java.net.*; // networking libraries
class Worker extends Thread  // definition of the used class
{ 
 Socket sock; //class member and socket
 Worker (Socket s) {sock = s;} //constructor
 public void run()
 {
 PrintStream out = null;
 BufferedReader in = null;
 try {
 in = new BufferedReader
 (new InputStreamReader(sock.getInputStream()));
 out = new PrintStream(sock.getOutputStream());
 try 
 {
 String name;
 name = in.readLine ();
 System.out.println("Looking up " + name);
 printRemoteAddress(name, out);
 } catch (IOException x) {
 System.out.println("Server read error");
 x.printStackTrace ();
 }
 sock.close(); //connection close
 } 
 catch (IOException ioe) {System.out.println(ioe);}
 }
 static void printRemoteAddress (String name, PrintStream out) {
	 try {
	 out.println("Looking up " + name + "...");
	 InetAddress machine = InetAddress.getByName (name);
	 out.println("Host name : " + machine.getHostName ()); 
	 out.println("Host IP : " + toText (machine.getAddress ()));
	 } catch(UnknownHostException ex) {
	 out.println ("Failed in atempt to look up " + name);
	 }
	 }
 
	 static String toText (byte ip[]) 
	 { 
	 StringBuffer result = new StringBuffer ();
	 for (int i = 0; i < ip.length; ++ i) {
	 if (i > 0) result.append (".");
	 result.append (0xff & ip[i]);
	 }
	 return result.toString ();
	 }
}
public class InetServer {

	 public static void main(String a[]) throws IOException {
	 int q_len = 6; 
	 int port = 1565;
	 Socket sock;

	 ServerSocket servsock = new ServerSocket(port, q_len);

	 System.out.println
	 ("Kumaresh Vijayakumar's Inet server starting up, listening at port 1565.\n");
	 while (true) {
	 sock = servsock.accept(); 
	 new Worker(sock).start(); 
	 }
	 }
	}













Client
import java.io.*; // I/O libraries
import java.net.*; //network library
public class InetClient{
 public static void main (String args[]) {
 String serverName;
 if (args.length < 1) serverName = "localhost";
 else serverName = args[0];

 System.out.println("Kumaresh Vijayakumar's Inet Client, \n");
 System.out.println("Using server: " + serverName + ", Port: 1565");
 BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
 try 
 {
 String name;
 do 
 {
 System.out.print
 ("Enter a hostname or an IP address, (quit) to end: ");
 System.out.flush ();
 name = in.readLine ();
 if (name.indexOf("quit") < 0)
 getRemoteAddress(name, serverName);
 } while (name.indexOf("quit") < 0); 
 System.out.println ("Cancelled by user request.");
 } catch (IOException x) {x.printStackTrace ();}
 }

 static String toText (byte ip[]) 
 { 
 StringBuffer result = new StringBuffer ();
 for (int i = 0; i < ip.length; ++ i) 
 {if (i > 0) result.append (".");
 result.append (0xff & ip[i]);
 }
 return result.toString ();
 }
 static void getRemoteAddress (String name, String serverName){
	 Socket sock;
	 BufferedReader fromServer;
	 PrintStream toServer;
	 String textFromServer;
	 try
	 {
	 sock = new Socket(serverName, 1565);
	 fromServer =
	 new BufferedReader(new InputStreamReader(sock.getInputStream()));
	 toServer = new PrintStream(sock.getOutputStream());
	 toServer.println(name); toServer.flush();
	 for (int i = 1; i <=3; i++){
	 textFromServer = fromServer.readLine();
	 if (textFromServer != null) System.out.println(textFromServer);
	 }
	 sock.close();
	 } catch (IOException x) {
	 System.out.println ("Socket error.");
	 x.printStackTrace ();
	 }
 }
}
 

